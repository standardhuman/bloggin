# The beauty of _.reduce

When I was first learning reduce, I somehow developed this notion that what reduce does is:

>"reduce takes in an array and returns a single value. "

When I read that, I imagined that reduce would intake something like:

    var myArray = [1, 2, 3, 4, 5];

and output something like:

    var singleVal = [4];

Well, that's really only kinda true.

Lets start with a quick overview of what reduce does, in terms of it's input and output.  A more accurate way to think about it is in terms of \_.map, \_.some, _.every, etc.

Remember variables that we use as flags to track the state of our boolean value in \_.every and \_.some?

    var flag = "true";

And remember the storage variable that we push our results into then return in \_.map?

    var storage = [];


With reduce, we don't need to declare these extra variables because reduce has one built right in, often called the **accumulator**, which is *nearly* the same as the startingValue (aka init aka initValue), but not quite. The **accumulator** is a variable, and it can collect all kinds of things or simply hold and track a boolean value. Sound familiar? Stay with me now.

The startingValue variable can be anything. A boolean, an object, an array, basically anything for which you might use a flag, state, or storage variable.

So lets say you start with startingValue as true and you want to track whether all the numbers in our input array are even.

The first thing that reduce will do is to set the accumulator variable equal to whatever we want to start off with, in this case, "true". We will then write a statement that checks each number to see if it's divisible by 2 (is it even?) and, if so, do nothing, because if all the numbers are even, we simply want to return the "true" that we started out with. However, if we hit upon an odd number, then we want to change the value of the acc to "false", and immediately return (and remember, return will stop the function and kick any attached value out to the function caller) the function. So, we have

if (curr % 2 === 0, ){

}


var reduce = function(collection, callbackFunction, startingValue{
  each(collection, function(element){
    startingValue = callback(startingValue, element);
  });
return startingValue;
});
